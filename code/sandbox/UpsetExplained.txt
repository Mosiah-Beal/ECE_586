040B0324 -> ADDI R11, R0, 804    //OP=1, RS=0, RT=11, IMM=804    #R11 = R0 + 804
040C063C -> ADDI R12, R0, 1596   //OP=1, RS=0, RT=12, IMM=1596   #R12 = R0 + 1596
040D0960 -> ADDI R13, R0, 2400   //OP=1, RS=0, RT=13, IMM=2400   #R13 = R0 + 2400
04120C80 -> ADDI R18, R0, 3200   //OP=1, RS=0, RT=18, IMM=3200   #R18 = R0 + 3200
0413FFFF -> ADDI R19, R0, -1     //OP=1, RS=0, RT=19, IMM=-1     #R19 = R0 - 1
0C140002 -> SUBI R4, R1, 2       //OP=3, RS=1, RT=4, IMM=2       #R4 = R1 - 2
0696004E -> MULI R6, R9, 78      //OP1, RS=9, RT=6, IMM=78      #R6 = R9 * 78
04170003 -> ADDI R7, R1, 3       //OP=1, RS=1, RT=7, IMM=3       #R7 = R1 + 3
0260C000 -> ADD R12, R6, R0      //OP=0, RS=6, RT=0, RD=12, SHAMT=0, FUNCT=0  #R12 = R6 + R0
316EFFFC -> LDW R14, R13, -4     //OP=12, RS=13, RT=14, IMM=-4   #R14 = mem[R13 - 4]
318F0004 -> LDW R15, R12, 4      //OP=12, RS=12, RT=15, IMM=4    #R15 = mem[R12 + 4]
31B10000 -> LDW R1, R13, 0       //OP=12, RS=13, RT=1, IMM=0     #R1 = mem[R13 + 0]
09CF8000 -> SUBI R15, R25, 32768 //OP=3, RS=25, RT=15, IMM=32768 #R15 = R25 - 32768
1A14A800 -> XOR R10, R9, R5      //OP=10, RS=9, RT=5, RD=10, SHAMT=0, FUNCT=10 #R10 = R9 ^ R5
3EB30003 -> BEQ R11, R3, 3       //OP=15, RS=11, RT=3, IMM=3     #if (R11 == R3) PC += 3
16310002 -> ORI R2, R12, 2       //OP=7, RS=12, RT=2, IMM=2      #R2 = R12 | 2
42C00000 -> JR R12               //OP=16, RS=12, RT=0, RD=0, SHAMT=0, FUNCT=0 #Jump to address in R12
12378800 -> AND R8, R19, R14     //OP=8, RS=19, RT=14, RD=8, SHAMT=0, FUNCT=8 #R8 = R19 & R14
02388800 -> ADD R8, R0, R14      //OP=0, RS=0, RT=14, RD=8, SHAMT=0, FUNCT=8  #R8 = R0 + R14
056B0004 -> SUBI R13, R11, 4     //OP=2, RS=11, RT=13, IMM=4     #R13 = R11 - 4
058C0004 -> SUBI R15, R12, 4     //OP=3, RS=12, RT=15, IMM=4     #R15 = R12 - 4
35B10000 -> STW R1, R13, 0       //OP=13, RS=13, RT=1, IMM=0     #mem[R13 + 0] = R1
05AD0004 -> SUBI R13, R13, 4     //OP=2, RS=13, RT=13, IMM=4     #R13 = R13 - 4
06520004 -> SUBI R10, R10, 4     //OP=3, RS=10, RT=10, IMM=4     #R10 = R10 - 4
32590000 -> LDW R12, R10, 0      //OP=12, RS=10, RT=12, IMM=0    #R12 = mem[R10 + 0]
3B20FFF0 -> BEQ R8, R9, -16      //OP=15, RS=8, RT=9, IMM=-16    #if (R8 == R9) PC += -16
2F39003F -> XORI R15, R13, 63    //OP=11, RS=13, RT=15, IMM=63   #R15 = R13 ^ 63
44000000 -> HALT                 //OP=17 #Halt execution


040B0324 = 000001 00000 01011 0000001100100100  
040C063C = 000001 00000 01100 0000011000111100
040D0960 = 000001 00000 01101 0000100101100000
04120C80 = 000001 00000 10010 0000110010000000
0413FFFF = 000001 00000 10011 1111111111111111
0C140002 = 000011 00001 00100 0000000000000010
0696004E = 000011 01001 00110 0000000001001110
04170003 = 000001 00001 00111 0000000000000011
0260C000 = 000000 00110 00000 01100 00000 000000
316EFFFC = 001100 01101 01110 1111111111111100
318F0004 = 001100 11000 01111 0000000000000100
31B10000 = 001100 01101 00001 0000000000000000
09CF8000 = 000011 11001 01111 1000000000000000
1A14A800 = 001010 01001 00101 01010 00000 001010
3EB30003 = 001111 01011 00011 0000000000000011
16310002 = 000111 01100 00010 0000000000000010
42C00000 = 010000 01100 00000 00000 00000 000000
12378800 = 001000 10011 01110 01000 00000 001000
02388800 = 000000 00000 01110 01000 00000 001000
056B0004 = 000010 01011 01101 0000000000000100
058C0004 = 000011 01100 01111 0000000000000100
35B10000 = 001101 01101 00001 0000000000000000
05AD0004 = 000010 01101 01101 0000000000000100
06520004 = 000011 01010 01010 0000000000000100
32590000 = 001100 01010 01100 0000000000000000
3B20FFF0 = 001111 01000 01001 1111111111110000
2F39003F = 001011 11001 11001 0000000000111111
44000000 = 010001 00000 00000 00000 00000 000000


040B0324 -> ADDI R11, R0, 804       //OP=1, RS=0, RT=11, IMM=804        #R11 = R0 + 804
040C063C -> ADDI R12, R0, 1596      //OP=1, RS=0, RT=12, IMM=1596       #R12 = R0 + 1596
040D0960 -> ADDI R13, R0, 2400      //OP=1, RS=0, RT=13, IMM=2400       #R13 = R0 + 2400
04120C80 -> ADDI R18, R0, 3200      //OP=1, RS=0, RT=18, IMM=3200       #R18 = R0 + 3200
0413FFFF -> ADDI R19, R0, -1        //OP=1, RS=0, RT=19, IMM=-1         #R19 = R0 - 1
0C140002 -> SUBI R4, R1, 2          //OP=3, RS=1, RT=4, IMM=2           #R4 = R1 - 2
0696004E -> SUBI R6, R9, 78 *        //OP=3, RS=9, RT=6, IMM=78          #R6 = R9 * 78
04170003 -> ADDI R7, R1, 3          //OP=1, RS=1, RT=7, IMM=3           #R7 = R1 + 3
0260C000 -> ADD R12, R6, R0         //OP=0, RS=6, RT=0, RD=12           #R12 = R6 + R0
316EFFFC -> LDW R14, R13, -4        //OP=12, RS=13, RT=14, IMM=-4       #R14 = mem[R13 - 4]
318F0004 -> LDW R15, R12, 4         //OP=12, RS=12, RT=15, IMM=4        #R15 = mem[R12 + 4]
31B10000 -> LDW R1, R13, 0          //OP=12, RS=13, RT=1, IMM=0         #R1 = mem[R13 + 0]
09CF8000 -> SUBI R15, R25, 32768    //OP=3, RS=25, RT=15, IMM=32768     #R15 = R25 - 32768
1A14A800 -> XOR R10, R9, R5         //OP=10, RS=9, RT=5, RD=10          #R10 = R9 ^ R5
3EB30003 -> BEQ R11, R3, 3          //OP=15, RS=11, RT=3, IMM=3         #if (R11 == R3) PC += 3
16310002 -> ORI R2, R12, 2          //OP=7, RS=12, RT=2, IMM=2          #R2 = R12 | 2
42C00000 -> JR R12                  //OP=16, RS=12, RT=0, RD=0          #Jump to address in R12
12378800 -> AND R8, R19, R14        //OP=8, RS=19, RT=14, RD=8          #R8 = R19 & R14
02388800 -> ADD R8, R0, R14         //OP=0, RS=0, RT=14, RD=8           #R8 = R0 + R14
056B0004 -> SUBI R13, R11, 4        //OP=2, RS=11, RT=13, IMM=4         #R13 = R11 - 4
058C0004 -> SUBI R15, R12, 4        //OP=3, RS=12, RT=15, IMM=4         #R15 = R12 - 4
35B10000 -> STW R1, R13, 0          //OP=13, RS=13, RT=1, IMM=0         #mem[R13 + 0] = R1
05AD0004 -> SUBI R13, R13, 4        //OP=2, RS=13, RT=13, IMM=4         #R13 = R13 - 4
06520004 -> SUBI R10, R10, 4        //OP=3, RS=10, RT=10, IMM=4         #R10 = R10 - 4
32590000 -> LDW R12, R10, 0         //OP=12, RS=10, RT=12, IMM=0        #R12 = mem[R10 + 0]
3B20FFF0 -> BEQ R8, R9, -16         //OP=15, RS=8, RT=9, IMM=-16        #if (R8 == R9) PC += -16
2F39003F -> XORI R15, R13, 63       //OP=11, RS=13, RT=15, IMM=63       #R15 = R13 ^ 63
44000000 -> HALT                    //OP=17 #Halt execution